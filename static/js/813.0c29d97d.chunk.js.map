{"version":3,"file":"static/js/813.0c29d97d.chunk.js","mappings":"wNAEaA,EAAOC,EAAAA,EAAAA,GAAH,oIASJC,GAAcD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,oIASXG,EAAYH,EAAAA,EAAAA,EAAH,4C,SChBTI,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,8BACGF,IACC,SAACN,EAAD,UACGM,EAAaG,KAAI,SAAAC,GAAI,OAElB,UAACR,EAAD,CAA2BS,GAAE,kBAAaD,EAAKE,IAAQC,MAAO,CAAEC,KAAMP,GAAtE,WACE,UAACH,EAAD,eAAaM,EAAKK,OAASL,EAAKM,SAEhC,gBAAKC,MAAM,MACXC,IAAG,yCAAoCR,EAAKS,eAC5CC,IAAI,OALYV,EAAKE,GAFL,OAiB/B,C,mJCzBYS,EAAOpB,EAAAA,EAAAA,KAAH,kFAKJqB,EAAQrB,EAAAA,EAAAA,MAAH,6FAKJsB,EAAStB,EAAAA,EAAAA,OAAH,wI,SCTPuB,EAAa,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACxB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAQMrB,GAAWC,EAAAA,EAAAA,MAGjB,OACI,UAACa,EAAD,CAAOR,MAAO,CAACC,KAAMP,GAAYkB,SAVhB,SAACI,GAClBA,EAAEC,iBACFL,EAASE,EAGZ,EAKG,WACI,SAACL,EAAD,CACIS,KAAK,OACLC,MAAOL,EACPM,SAAU,SAACJ,GAAD,OAAOD,EAASC,EAAEK,OAAOF,MAAzB,KAEd,SAACT,EAAD,CAASQ,KAAK,SAAd,sBAIX,E,mBCqBD,EAxCoB,WAGlB,OAAwCL,EAAAA,EAAAA,UAAS,IAAjD,eAAOpB,EAAP,KAAqB6B,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BZ,EAAAA,EAAAA,WAAS,GAAvC,eAAOa,EAAP,KAAgBC,EAAhB,KACA,GAAkCd,EAAAA,EAAAA,WAAS,GAA3C,eAAOe,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WAER,IAAMhB,EAAQU,EAAaO,IAAI,SAC1BjB,IACLe,GAAa,IACbG,EAAAA,EAAAA,IAAgBlB,GACfmB,MAAK,SAAAC,GACFZ,EAAgBY,EAAKC,SACjBD,EAAKC,QAAQC,OAEbT,GAAW,EAEhB,IACAU,OAAM,SAAAC,GAAY,IAClBC,QAAQV,GAAa,IACzB,GAAE,CAACL,IAMJ,OACE,gCACCI,IAAa,SAACY,EAAA,EAAD,KACZ,SAAC7B,EAAD,CAAaC,SAPI,SAAAE,GACnBW,EAAgB,CAAEX,MAAAA,GACnB,IAMIrB,EAAa2C,OAAS,IAAK,SAAC5C,EAAA,EAAD,CAAUC,aAAcA,IAEnDiC,IAAW,uDAGjB,C","sources":["components/FilmsList/FilmList.styled.js","components/FilmsList/FilmList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/SearchFilm/SearchFilms.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nexport const List = styled.ul`\njustify-content: center;\npadding: 10px;\ndisplay: flex;\nflex-wrap: wrap;\ngap: 15px;\npadding-top: 10px;\n`\n\nexport const StyledLinkk = styled(Link)`\ndisplay: block;\ntext-align: center;\nmargin-top: 10px;\npadding: 10px;\nfont-size: 16px;\ncolor: #8c6cbd;\n`;\n\nexport const FilmTitle = styled.p`\nmargin-bottom: 10px;`","import {  useLocation } from 'react-router-dom';\nimport { List } from './FilmList.styled';\nimport { StyledLinkk, FilmTitle } from './FilmList.styled';\n\nexport const FilmList = ({ popularFilms }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {popularFilms && (\n        <List>\n          {popularFilms.map(film => (\n            \n              <StyledLinkk key={film.id} to={`/movies/${film.id}`}   state={{ from: location }}>\n                <FilmTitle> {film.title || film.name}</FilmTitle>\n               \n                <img width='300'\n                src={`https://image.tmdb.org/t/p/w500${film.backdrop_path}`}\n                alt=\"\"\n              />\n              </StyledLinkk>\n             \n           \n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 15px;\n  justify-content: center;`;\n\nexport const Input = styled.input`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 10px;\n `;\n export const Button = styled.button`\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 10px;\n  color: #fff;\n  background-color: #a19ff5;`","import { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nimport { Form, Input,Button } from './SearchForm.styled';\nexport const SearchForm = ({onSubmit}) => {\n    const [query, setQuery] = useState(\"\");\n \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit(query);\n       \n        \n    }\n    const location = useLocation();\n    \n    \n    return (\n        <Form  state={{from: location}}  onSubmit={handleSubmit}>\n            <Input\n                type=\"text\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n            />\n            <Button  type=\"submit\">Search</Button>\n          \n        </Form>\n    )\n}","import { useState, useEffect } from 'react';\nimport { useSearchParams, } from 'react-router-dom';\nimport { getFilmsByQuery } from 'services/api';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { FilmList } from 'components/FilmsList/FilmList';\nimport { Loader } from 'components/Loader/Loader';\n\n\nconst FilmsSearch = () => {\n  \n  \n  const [popularFilms, setPopularFilms] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n   \n    const query = searchParams.get('query');\n    if (!query) return;\n    setIsLoading(true);\n    getFilmsByQuery(query)\n    .then(data => {\n        setPopularFilms(data.results);\n        if (data.results.length > 0) {\n\n            setIsEmpty(true);\n        } else setIsEmpty(true);\n      })\n      .catch(erroer => {})\n      .finally(setIsLoading(false));\n  }, [searchParams]);\n\n  const handleSubmit = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <>\n    {isLoading && <Loader />}\n      <SearchForm  onSubmit={handleSubmit} />\n      {popularFilms.length > 0 && <FilmList popularFilms={popularFilms} />}\n\n      {isEmpty && <p>Sorry, there is no result</p>}\n    </>\n  );\n};\n\nexport default FilmsSearch;\n"],"names":["List","styled","StyledLinkk","Link","FilmTitle","FilmList","popularFilms","location","useLocation","map","film","to","id","state","from","title","name","width","src","backdrop_path","alt","Form","Input","Button","SearchForm","onSubmit","useState","query","setQuery","e","preventDefault","type","value","onChange","target","setPopularFilms","useSearchParams","searchParams","setSearchParams","isEmpty","setIsEmpty","isLoading","setIsLoading","useEffect","get","getFilmsByQuery","then","data","results","length","catch","erroer","finally","Loader"],"sourceRoot":""}